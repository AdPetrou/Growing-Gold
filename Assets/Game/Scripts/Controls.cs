//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Game/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""76b54aeb-aeb3-4425-b1e0-abb3708e724b"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""836c5b87-13a5-4974-bed6-b4242f6b381e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tool Shop"",
                    ""type"": ""Button"",
                    ""id"": ""0e2337c9-142d-4f69-9ac3-0d492c9ad73b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Research Shop"",
                    ""type"": ""Button"",
                    ""id"": ""c4b86c17-a35a-4824-93b0-260668b8af80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gold Cheat"",
                    ""type"": ""Button"",
                    ""id"": ""74782a64-4f93-42b1-91b2-d66d429e6643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc583bf9-5316-42a4-96c5-0370cdb415fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""034683b7-b94d-4816-a86e-56ba51a60384"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3842ff4-631d-4449-871d-4b34e1d1d1c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tool Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""376709a2-924c-44fa-8a18-559f84b3459d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Research Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c7bc339-4ea1-4ac3-8812-5333a8ad1d83"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gold Cheat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Use = m_Player.FindAction("Use", throwIfNotFound: true);
            m_Player_ToolShop = m_Player.FindAction("Tool Shop", throwIfNotFound: true);
            m_Player_ResearchShop = m_Player.FindAction("Research Shop", throwIfNotFound: true);
            m_Player_GoldCheat = m_Player.FindAction("Gold Cheat", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Use;
        private readonly InputAction m_Player_ToolShop;
        private readonly InputAction m_Player_ResearchShop;
        private readonly InputAction m_Player_GoldCheat;
        public struct PlayerActions
        {
            private @Controls m_Wrapper;
            public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Use => m_Wrapper.m_Player_Use;
            public InputAction @ToolShop => m_Wrapper.m_Player_ToolShop;
            public InputAction @ResearchShop => m_Wrapper.m_Player_ResearchShop;
            public InputAction @GoldCheat => m_Wrapper.m_Player_GoldCheat;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Use.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                    @Use.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                    @Use.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                    @ToolShop.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToolShop;
                    @ToolShop.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToolShop;
                    @ToolShop.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToolShop;
                    @ResearchShop.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResearchShop;
                    @ResearchShop.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResearchShop;
                    @ResearchShop.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResearchShop;
                    @GoldCheat.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoldCheat;
                    @GoldCheat.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoldCheat;
                    @GoldCheat.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoldCheat;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Use.started += instance.OnUse;
                    @Use.performed += instance.OnUse;
                    @Use.canceled += instance.OnUse;
                    @ToolShop.started += instance.OnToolShop;
                    @ToolShop.performed += instance.OnToolShop;
                    @ToolShop.canceled += instance.OnToolShop;
                    @ResearchShop.started += instance.OnResearchShop;
                    @ResearchShop.performed += instance.OnResearchShop;
                    @ResearchShop.canceled += instance.OnResearchShop;
                    @GoldCheat.started += instance.OnGoldCheat;
                    @GoldCheat.performed += instance.OnGoldCheat;
                    @GoldCheat.canceled += instance.OnGoldCheat;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnUse(InputAction.CallbackContext context);
            void OnToolShop(InputAction.CallbackContext context);
            void OnResearchShop(InputAction.CallbackContext context);
            void OnGoldCheat(InputAction.CallbackContext context);
        }
    }
}
